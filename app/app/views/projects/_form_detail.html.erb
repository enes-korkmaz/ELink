<%
# Copyright (C) 2025 Frank Mayer, Enes Korkmaz, Jascha Sonntag, Andreas Rothaler, Eray Akyazililar, Jan Magister
#
# This file is part of Elink.
#
# Elink is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Elink is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Elink. If not, see <http://www.gnu.org/licenses/>.
%>

<%= form_with(model: project, class: "contents", id: "create_project_form") do |form| %>
  <% if project.errors.any? %>
    <div id="activerecord.error_explanation" class="py-2 px-3 mb-3 font-medium text-red-500 bg-red-50 rounded-lg" style="border: 1px solid #D40031;">
      <h2><%= t("activerecord.errors.models.project.header") %></h2>
    </div>
  <% end %>
  <!-- Required Information -->
  <div class="mb-3 container-second">
    <h3 class="heading"><%= t("activerecord.attributes.project.sections.required_info") %></h3>
    <!-- Project Name -->
    <div class="flex-1 gap-2 m-5">
      <div class="flex items-center">
        <strong>
          <%= form.label :project_name, "#{t("activerecord.attributes.project.project_name")}*", 
              style: "color: #{project.errors[:project_name].any? ? '#D40031' : 'inherit'};" %>
        </strong>
      <button popovertarget="project_name-popover" class="ml-2">
        <%= image_tag("svg/circle-info.svg") %>
      </button>

      <div popover id="project_name-popover" popoverpositioning="auto" hidden class="p-6 max-w-xs bg-white rounded-lg border border-red-600 shadow-lg">
        <button popovertarget="project_name-popover" popovertargetaction="hide" class="absolute top-4 right-4">
          <%= image_tag("svg/x-mark-red.svg") %>
        </button>
        <p class="font-bold text-neutral-700"><%= t("activerecord.attributes.project.project_name") %></p>
        <p class="p-2 max-w-xs text-gray-600 rounded-md">
          <%= t("activerecord.attributes.info_project.project_name") %>
        </p>
      </div>
      </div>
      <%= form.text_field :project_name,
      style: "border: 1px solid #{project.errors[:project_name].present? ? '#D40031' : '#D1D5DB'}; border-radius: 0.375rem; padding: 0.5rem; outline: none;", 
        class: "w-full sm:w-[50%]" %>

      <div style="color: #D40031; font-size: 0.875rem; margin-top: 0.25rem;">
        <% if project.errors[:project_name].any? %>
          <%= project.errors[:project_name].first %>
        <% end %>
      </div>
    </div>
    <!-- Project Client -->
    <div class="flex-1 gap-2 m-5">
      <div class="flex items-center">
        <strong>
          <%= form.label :project_client, "#{t("activerecord.attributes.project.project_client")}*", 
              style: "color: #{project.errors[:project_client].any? ? '#D40031' : 'inherit'};" %>
        </strong>
        <button popovertarget="project_client-popover" class="ml-2">
          <%= image_tag("svg/circle-info.svg") %>
        </button>

        <div popover id="project_client-popover" popoverpositioning="auto" hidden class="p-6 max-w-xs bg-white rounded-lg border border-red-600 shadow-lg">
          <button popovertarget="project_client-popover" popovertargetaction="hide" class="absolute top-4 right-4">
            <%= image_tag("svg/x-mark-red.svg") %>
          </button>
          <p class="font-bold text-neutral-700"><%= t("activerecord.attributes.project.project_client") %></p>
          <p class="p-2 max-w-xs text-gray-600 rounded-md">
            <%= t("activerecord.attributes.info_project.project_client") %>
          </p>
        </div>
      </div>
      <%= form.text_field :project_client,
        style: "border: 1px solid #{project.errors[:project_client].present? ? '#D40031' : '#D1D5DB'}; border-radius: 0.375rem; padding: 0.5rem; outline: none;", 
          class: "w-full sm:w-[50%]" %>

      <div style="color: #D40031; font-size: 0.875rem; margin-top: 0.25rem;">
        <% if project.errors[:project_client].any? %>
          <%= project.errors[:project_client].first %>
        <% end %>
      </div>
    </div>
    <!-- Project Status -->
    <div class="flex-1 gap-2 m-5">
      <div class="flex items-center">
        <strong>
          <%= form.label :project_status, "#{t("activerecord.attributes.project.project_status")}*", 
              style: "color: #{project.errors[:project_status].any? ? '#D40031' : 'inherit'};" %>
        </strong>
        <button popovertarget="project_status-popover" class="ml-2">
          <%= image_tag("svg/circle-info.svg") %>
        </button>

        <div popover id="project_status-popover" popoverpositioning="auto" hidden class="p-6 max-w-xs bg-white rounded-lg border border-red-600 shadow-lg">
          <button popovertarget="project_status-popover" popovertargetaction="hide" class="absolute top-4 right-4">
            <%= image_tag("svg/x-mark-red.svg") %>
          </button>
          <p class="font-bold text-neutral-700"><%= t("activerecord.attributes.project.project_status") %></p>
          <p class="p-2 max-w-xs text-gray-600 rounded-md">
            <%= t("activerecord.attributes.info_project.project_status") %>
          </p>
        </div>
      </div>
     
      <%= form.select :project_status, 
        Project.project_statuses.keys.map { |status| [I18n.t("activerecord.attributes.project.project_statuses.#{status}"), status] },
        { include_blank: t("inputfield_placeholder.choice_box_select") }, 
        style: "border: 1px solid #{project.errors[:project_status].present? ? '#D40031' : '#D1D5DB'}; border-radius: 0.375rem; padding: 0.5rem; outline: none;", 
            class: "w-[70%] sm:w-[30%]" %>

      <div style="color: #D40031; font-size: 0.875rem; margin-top: 0.25rem;">
        <% if project.errors[:project_status].any? %>
          <%= project.errors[:project_status].first %>
        <% end %>
      </div>
    </div>
    <!-- Execution Location -->
    <div class="flex-1 gap-2 m-5">
      <div class="flex items-center">
        <strong>
          <%= form.label :execution_locations, "#{t("activerecord.attributes.project.execution_location")}*", 
              style: "color: #{project.errors[:execution_locations].any? ? '#D40031' : 'inherit'};" %>
        </strong>
        <button popovertarget="execution_location-popover" class="ml-2">
          <%= image_tag("svg/circle-info.svg") %>
        </button>

        <div popover id="execution_location-popover" popoverpositioning="auto" hidden class="p-6 max-w-xs bg-white rounded-lg border border-red-600 shadow-lg">
          <button popovertarget="execution_location-popover" popovertargetaction="hide" class="absolute top-4 right-4">
            <%= image_tag("svg/x-mark-red.svg") %>
          </button>
          <p class="font-bold text-neutral-700"><%= t("activerecord.attributes.project.execution_location") %></p>
          <p class="p-2 max-w-xs text-gray-600 rounded-md">
            <%= t("activerecord.attributes.info_project.execution_location") %>
          </p>
        </div>
      </div>
      <%= form.text_field :execution_locations,
        style: "border: 1px solid #{project.errors[:execution_locations].present? ? '#D40031' : '#D1D5DB'}; border-radius: 0.375rem; padding: 0.5rem; outline: none;", 
          class: "w-full sm:w-[80%]" %>

      <div style="color: #D40031; font-size: 0.875rem; margin-top: 0.25rem;">
        <% if project.errors[:execution_locations].any? %>
          <%= project.errors[:execution_locations].first %>
        <% end %>
      </div>
    </div>
    <!-- Project Type -->
    <div class="flex-1 gap-2 m-5">
      <div class="flex items-center">
        <strong> 
          <%= form.label :project_type, "#{t("activerecord.attributes.project.project_type")}*", 
              style: "color: #{project.errors[:project_type].any? ? '#D40031' : 'inherit'};" %>
        </strong>
        <button popovertarget="project_type-popover" class="ml-2">
          <%= image_tag("svg/circle-info.svg") %>
        </button>

        <div popover id="project_type-popover" popoverpositioning="auto" hidden class="p-6 max-w-xs bg-white rounded-lg border border-red-600 shadow-lg">
          <button popovertarget="project_type-popover" popovertargetaction="hide" class="absolute top-4 right-4">
            <%= image_tag("svg/x-mark-red.svg") %>
          </button>
          <p class="font-bold text-neutral-700"><%= t("activerecord.attributes.project.project_type") %></p>
          <p class="p-2 max-w-xs text-gray-600 rounded-md">
            <%= t("activerecord.attributes.info_project.project_type") %>
          </p>
        </div>
      </div>
      <div class="flex overflow-y-auto flex-wrap min-w-full max-h-32" id="project_type_checkboxes">
        <% ProjectType.all.each do |type| %>
          <!-- No I18N because adding new types does not support it -->
          <label for="project_type_<%= type.id %>" class="flex items-center py-1 px-3 m-1 bg-gray-200 rounded-full cursor-pointer">
            <%= check_box_tag "project_types[]", type.id, false, id: "project_type_#{type.id}", class: "project_type_checkboxes h-5 w-5", data: { type_name: type.type_name } %>
            <span class="ml-2"><%= type.type_name %></span>
          </label>
        <% end %>
      </div>
      <!-- This is where the Project types get added to be than saved as a json -->
      <%= form.hidden_field :project_type, id: "project_type_text_field" %>

      <!-- Creating new Project types -->
      <div class="flex-1">
        <div class="flex items-center">
          <strong> <%= "#{t("activerecord.attributes.project.new_project_type")} " "#{t("optinal_tag")}"%></strong>
          <button popovertarget="new_project_type-popover" class="ml-2">
            <%= image_tag("svg/circle-info.svg") %>
          </button>

          <div popover id="new_project_type-popover" popoverpositioning="auto" hidden class="p-6 max-w-xs bg-white rounded-lg border border-red-600 shadow-lg">
            <button popovertarget="new_project_type-popover" popovertargetaction="hide" class="absolute top-4 right-4">
              <%= image_tag("svg/x-mark-red.svg") %>
            </button>
            <p class="font-bold text-neutral-700"><%= t("activerecord.attributes.project.new_project_type") %></p>
            <p class="p-2 max-w-xs text-gray-600 rounded-md"><%= t("activerecord.attributes.info_project.new_project_type") %></p>
          </div>
        </div>
                
        <div class="flex flex-col sm:flex-row sm:gap-4 item-center">
          <input type="text" 
                id="new_project_type_field" 
                placeholder="<%= t('inputfield_placeholder.add_term') %>" 
                pattern="^(?!\s*$)[a-zA-ZäöüÄÖÜß0-9 ]{2,30}$"
                required="true" 
                style="border: 1px solid #D1D5DB; border-radius: 0.375rem; padding: 0.5rem; outline: none;" 
                class="w-full sm:w-[50%]">

          <button type="button" 
            id="add_project_type_button" 
            class="btn flex items-center justify-center box-border sm:mt-0 w-[30%] sm:w-[20%]">
              <%= image_tag("svg/new.svg") %>
            <span class="hidden ml-2 sm:inline">
              <%= t("actions.add") %>
            </span>
          </button>
        </div>
      </div>
      <div style="color: #D40031; font-size: 0.875rem; margin-top: 0.25rem;">
        <% if project.errors[:project_type].any? %>
          <%= project.errors[:project_type].first %>
        <% end %>
      </div>
    </div>
    <!-- Key Topic -->
    <div class="flex-1 gap-2 m-5">
      <div class="flex items-center">
        <strong> 
          <%= form.label :key_topic, "#{t("activerecord.attributes.project.key_topic")}*", 
              style: "color: #{project.errors[:key_topic].any? ? '#D40031' : 'inherit'};" %>
        </strong>
        <button popovertarget="key_topic-popover" class="ml-2">
          <%= image_tag("svg/circle-info.svg") %>
        </button>

        <div popover id="key_topic-popover" popoverpositioning="auto" hidden class="p-6 max-w-xs bg-white rounded-lg border border-red-600 shadow-lg">
          <button popovertarget="key_topic-popover" popovertargetaction="hide" class="absolute top-4 right-4">
            <%= image_tag("svg/x-mark-red.svg") %>
          </button>
          <p class="font-bold text-neutral-700"><%= t("activerecord.attributes.project.key_topic") %></p>
          <p class="p-2 max-w-xs text-gray-600 rounded-md">
            <%= t("activerecord.attributes.info_project.key_topic") %>
          </p>
        </div>
      </div>
      <div class="flex overflow-y-auto flex-wrap min-w-full max-h-32" id="key_topic_checkboxes">
        <% KeyTopic.all.each do |topic| %>
          <div class="flex items-center py-1 px-3 m-1 bg-gray-200 rounded-full">
            <!-- No I18N because adding new topics does not support it -->
            <%= check_box_tag "key_topics[]", topic.id, false, id: "key_topic_#{topic.id}",  class: "key_topic_checkboxes h-5 w-5", data: { topic_name: topic.topic_name } %>
            <label class="ml-2"><%= topic.topic_name %></label>
          </div>
        <% end %>
      </div>
      <!-- This is where the Key topics get added to be than saved as a json -->
      <%= form.hidden_field :key_topic, id: "key_topic_text_field" %>

      <!-- Creating new Project types -->
      <div class="flex-1">
        <div class="flex items-center">
          <strong> <%= "#{t("activerecord.attributes.project.new_key_topic")} " "#{t("optinal_tag")}"%></strong>
          <button popovertarget="new_key_topic-popover" class="ml-2">
            <%= image_tag("svg/circle-info.svg") %>
          </button>
          <div popover id="new_key_topic-popover" popoverpositioning="auto" hidden class="p-6 max-w-xs bg-white rounded-lg border border-red-600 shadow-lg">
            <button popovertarget="new_key_topic-popover" popovertargetaction="hide" class="absolute top-4 right-4">
              <%= image_tag("svg/x-mark-red.svg") %>
            </button>
            <p class="font-bold text-neutral-700"><%= t("activerecord.attributes.project.new_key_topic") %></p>
            <p class="p-2 max-w-xs text-gray-600 rounded-md"><%= t("activerecord.attributes.info_project.new_key_topic") %></p>
          </div>
        </div>

        <div class="flex flex-col sm:flex-row sm:gap-4 item-center">
          <input type="text" 
                id="new_key_topic_field" 
                placeholder="<%= t('inputfield_placeholder.add_term') %>" 
                pattern="^(?!\s*$)[a-zA-ZäöüÄÖÜß0-9 ]{2,30}$"
                required="true" 
                style="border: 1px solid #D1D5DB; border-radius: 0.375rem; padding: 0.5rem; outline: none;" 
                class="w-full sm:w-[50%]">

          <button type="button" 
            id="add_key_topic_button" 
            class="btn flex items-center justify-center box-border sm:mt-0 w-[30%] sm:w-[20%]">
              <%= image_tag("svg/new.svg") %>
            <span class="hidden ml-2 sm:inline">
              <%= t("actions.add") %>
            </span>
          </button>
        </div>
      </div>
      <div style="color: #D40031; font-size: 0.875rem; margin-top: 0.25rem;">
        <% if project.errors[:key_topic].any? %>
          <%= project.errors[:key_topic].first %>
        <% end %>
      </div>
    </div>
  </div>
  <!-- Optional Details -->
  <div class="mb-3 container-second">
    <h3 class="heading"><%= t("activerecord.attributes.project.sections.additional_info") %></h3>
    <!-- Project Date From -->
    <div class="flex-1 gap-2 m-5">
      <div class="flex items-center">
        <strong>
          <%= form.label :project_date_from, t("activerecord.attributes.project.project_date_from"), 
              style: "color: #{project.errors[:project_date_from].any? ? '#D40031' : 'inherit'};" %>
        </strong>
        <button popovertarget="project_date_from-popover" class="ml-2">
          <%= image_tag("svg/circle-info.svg") %>
        </button>

        <div popover id="project_date_from-popover" popoverpositioning="auto" hidden class="p-6 max-w-xs bg-white rounded-lg border border-red-600 shadow-lg">
          <button popovertarget="project_date_from-popover" popovertargetaction="hide" class="absolute top-4 right-4">
            <%= image_tag("svg/x-mark-red.svg") %>
          </button>
          <p class="font-bold text-neutral-700"><%= t("activerecord.attributes.project.project_date_from") %></p>
          <p class="p-2 max-w-xs text-gray-600 rounded-md">
            <%= t("activerecord.attributes.info_project.project_date_from") %>
          </p>
        </div>
      </div>
      <%= form.date_field :project_date_from,
        style: "border: 1px solid #{project.errors[:project_date_from].present? ? '#D40031' : '#D1D5DB'}; border-radius: 0.375rem; padding: 0.5rem; outline: none;", 
          class: "w-full sm:w-[50%]" %>

      <div style="color: #D40031; font-size: 0.875rem; margin-top: 0.25rem;">
        <% if project.errors[:project_date_from].any? %>
          <%= project.errors[:project_date_from].first %>
        <% end %>
      </div>
    </div>
    <!-- Project Date To -->
    <div class="flex-1 gap-2 m-5">
      <div class="flex items-center">
        <strong>
          <%= form.label :project_date_to, t("activerecord.attributes.project.project_date_to"), 
              style: "color: #{project.errors[:project_date_to].any? ? '#D40031' : 'inherit'};" %>
        </strong>
        <button popovertarget="project_date_to-popover" class="ml-2">
          <%= image_tag("svg/circle-info.svg") %>
        </button>

        <div popover id="project_date_to-popover" popoverpositioning="auto" hidden class="p-6 max-w-xs bg-white rounded-lg border border-red-600 shadow-lg">
          <button popovertarget="project_date_to-popover" popovertargetaction="hide" class="absolute top-4 right-4">
            <%= image_tag("svg/x-mark-red.svg") %>
          </button>
          <p class="font-bold text-neutral-700"><%= t("activerecord.attributes.project.project_date_to") %></p>
          <p class="p-2 max-w-xs text-gray-600 rounded-md">
            <%= t("activerecord.attributes.info_project.project_date_to") %>
          </p>
        </div>
      </div>
      <%= form.date_field :project_date_to,
        style: "border: 1px solid #{project.errors[:project_date_to].present? ? '#D40031' : '#D1D5DB'}; border-radius: 0.375rem; padding: 0.5rem; outline: none;", 
          class: "w-full sm:w-[50%]" %>

      <div style="color: #D40031; font-size: 0.875rem; margin-top: 0.25rem;">
        <% if project.errors[:project_date_to].any? %>
          <%= project.errors[:project_date_to].first %>
        <% end %>
      </div>
    </div>
    <!-- Flight Data -->
    <div class="flex-1 gap-2 m-5">
      <div class="flex items-center">
        <strong>
          <%= form.label :flight_data, t("activerecord.attributes.project.flight_data") %>
        </strong>
        <button popovertarget="flight_data-popover" class="ml-2">
          <%= image_tag("svg/circle-info.svg") %>
        </button>

        <div popover id="flight_data-popover" popoverpositioning="auto" hidden class="p-6 max-w-xs bg-white rounded-lg border border-red-600 shadow-lg">
          <button popovertarget="flight_data-popover" popovertargetaction="hide" class="absolute top-4 right-4">
            <%= image_tag("svg/x-mark-red.svg") %>
          </button>
          <p class="font-bold text-neutral-700"><%= t("activerecord.attributes.project.flight_data") %></p>
          <p class="p-2 max-w-xs text-gray-600 rounded-md">
            <%= t("activerecord.attributes.info_project.flight_data") %>
          </p>
        </div>
      </div>
      <%= form.text_field :flight_data,
        style: "border: 1px solid #D1D5DB; border-radius: 0.375rem; padding: 0.5rem; outline: none;", 
        class: "w-full sm:w-[80%]" %>
    </div>
    <!-- Target Audience -->
    <div class="flex-1 gap-2 m-5">
      <div class="flex items-center">
        <strong>
          <%= form.label :target_audience, t("activerecord.attributes.project.target_audience") %>
        </strong>
        <button popovertarget="target_audience-popover" class="ml-2">
          <%= image_tag("svg/circle-info.svg") %>
        </button>

        <div popover id="target_audience-popover" popoverpositioning="auto" hidden class="p-6 max-w-xs bg-white rounded-lg border border-red-600 shadow-lg">
          <button popovertarget="target_audience-popover" popovertargetaction="hide" class="absolute top-4 right-4">
            <%= image_tag("svg/x-mark-red.svg") %>
          </button>
          <p class="font-bold text-neutral-700"><%= t("activerecord.attributes.project.target_audience") %></p>
          <p class="p-2 max-w-xs text-gray-600 rounded-md">
            <%= t("activerecord.attributes.info_project.target_audience") %>
          </p>
        </div>
      </div>
      <%= form.text_field :target_audience,
        style: "border: 1px solid #D1D5DB; border-radius: 0.375rem; padding: 0.5rem; outline: none;", 
        class: "w-full sm:w-[80%]" %>
    </div>
  </div>
  <!-- Document section -->
  <div class="container-second">
    <h3 class="heading"><%= t("activerecord.attributes.project.sections.documents") %></h3>
    <!-- Participant Document -->
    <div class="flex-1 gap-2 m-5">
      <div class="flex items-center">
        <strong>
          <%= "#{t("activerecord.attributes.project.documents.participant_list")}:" %>
        </strong>
        <button popovertarget="participant_list-popover" class="ml-2">
          <%= image_tag("svg/circle-info.svg") %>
        </button>

        <div popover id="participant_list-popover" popoverpositioning="auto" hidden class="p-6 max-w-xs bg-white rounded-lg border border-red-600 shadow-lg">
          <button popovertarget="participant_list-popover" popovertargetaction="hide" class="absolute top-4 right-4">
            <%= image_tag("svg/x-mark-red.svg") %>
          </button>
          <p class="font-bold text-neutral-700"><%= t("activerecord.attributes.project.documents.participant_list") %></p>
          <p class="p-2 max-w-xs text-gray-600 rounded-md">
            <%= t("activerecord.attributes.info_project.documents") %>
          </p>
        </div>
      </div>
      <div class="flex gap-5 items-center">
        <% if project.participant_list.attached? %>
          <strong>
            <!-- we do this to see the file extension when the file name is relativly long -->
            <%= link_to truncate(File.basename(project.participant_list.filename.to_s, File.extname(project.participant_list.filename.to_s)), length: 10, omission: '...') + File.extname(project.participant_list.filename.to_s), 
                        rails_blob_path(project.participant_list, disposition: "attachment", cache_buster: Time.now.to_i),
                        title: project.participant_list.filename.to_s,
                        id: 'participant_list_link' %>
          </strong>
          <!-- View document button -->
          <%= link_to rails_blob_path(project.participant_list, disposition: "inline"), 
                      target: "_blank", rel: "noopener noreferrer", class: "btn flex items-center justify-between w-auto", 
                      data: { cache_buster: Time.now.to_i }, title: t("actions.view") do %>
            <%= image_tag("svg/open-eye.svg") %>
            <span class="hidden ml-2 sm:inline"><%= t("actions.view") %></span>
          <% end %>
          <!-- Download document button -->
          <%= link_to rails_blob_path(project.participant_list, disposition: "attachment"), 
                      class: "btn flex items-center justify-between w-auto", 
                      data: { cache_buster: Time.now.to_i }, title: t("actions.download")  do %>
            <%= image_tag("svg/doc-download.svg") %>
            <span class="hidden ml-2 sm:inline"><%= t("actions.download") %></span>
          <% end %>
          <!-- Delete document button -->
          <button class="flex justify-between items-center w-auto btn"
                  onclick="removeDocumentAndSubmit('project[remove_participant_list]', 
                  '<%= t('actions.confirm_delete_doc', document: project.participant_list.filename) %>');"
                  title="<%=  t("actions.delete")  %>">
            <%= image_tag("svg/delete.svg") %>
            <span class="hidden ml-2 sm:inline"><%= t("actions.delete") %></span>
          </button>
        <% else %>
          <%= t("inputfield_placeholder.document_no_upload") %>
        <% end %>
      </div>
      <!-- Participant Upload -->
      <div class="my-5">
        <%= form.file_field :participant_list, style: "border: 1px solid #D1D5DB; border-radius: 0.375rem; padding: 0.325rem; outline: none;", 
          class: "w-full sm:w-[50%]" %>
      </div>
    </div>
    <!-- Invitation Document -->
    <div class="flex-1 gap-2 m-5">
      <div class="flex items-center">
        <strong>
          <%= form.label :invitation_document, "#{t("activerecord.attributes.project.documents.invitation_document")}:", 
              style: "color: #{project.errors[:invitation_document].any? ? '#D40031' : "#{project.errors[:invitation_status].present? ? '#D40031': 'inherit'};"};" %>
        </strong>
        <button popovertarget="invitation_document-popover" class="ml-2">
          <%= image_tag("svg/circle-info.svg") %>
        </button>

        <div popover id="invitation_document-popover" popoverpositioning="auto" hidden class="p-6 max-w-xs bg-white rounded-lg border border-red-600 shadow-lg">
          <button popovertarget="invitation_document-popover" popovertargetaction="hide" class="absolute top-4 right-4">
            <%= image_tag("svg/x-mark-red.svg") %>
          </button>
          <p class="font-bold text-neutral-700"><%= t("activerecord.attributes.project.documents.invitation_document") %></p>
          <p class="p-2 max-w-xs text-gray-600 rounded-md">
            <%= t("activerecord.attributes.info_project.documents") %>
          </p>
        </div>
      </div>
      <div class="flex gap-5 items-center">
        <% if project.invitation_document.attached? %>
          <strong>
            <%= link_to truncate(File.basename(project.invitation_document.filename.to_s, File.extname(project.invitation_document.filename.to_s)), length: 10, omission: '...') + File.extname(project.invitation_document.filename.to_s), 
                        rails_blob_path(project.invitation_document, disposition: "attachment", cache_buster: Time.now.to_i),
                        title: project.invitation_document.filename.to_s,
                        id: 'invitation_document_link' %>
          </strong>
          <!-- View document button -->
          <%= link_to rails_blob_path(project.invitation_document, disposition: "inline"), 
                      target: "_blank", rel: "noopener noreferrer", class: "btn flex items-center justify-between w-auto", 
                      data: { cache_buster: Time.now.to_i }, title: t("actions.view") do %>
            <%= image_tag("svg/open-eye.svg") %>
            <span class="hidden ml-2 sm:inline"><%= t("actions.view") %></span>
          <% end %>
          <!-- Download document button -->
          <%= link_to rails_blob_path(project.invitation_document, disposition: "attachment"), 
                      class: "btn flex items-center justify-between w-auto", 
                      data: { cache_buster: Time.now.to_i }, title: t("actions.download") do %>
            <%= image_tag("svg/doc-download.svg") %>
            <span class="hidden ml-2 sm:inline"><%= t("actions.download") %></span>
          <% end %>
          <!-- Delete document button -->
          <button class="flex justify-between items-center w-auto btn"
                  onclick="removeDocumentAndSubmit('project[remove_invitation_document]', 
                  '<%= t('actions.confirm_delete_doc', document: project.invitation_document.filename) %>');"
                  title="<%=  t("actions.delete")  %>">
            <%= image_tag("svg/delete.svg") %>
            <span class="hidden ml-2 sm:inline"><%= t("actions.delete") %></span>
          </button>
        <% else %>
          <%= t("inputfield_placeholder.document_no_upload") %>
        <% end %>
      </div>  
      <!-- Invitation Upload & Status -->
      <div class="flex-1 my-5">
        <!-- File Input Field -->
        <%= form.file_field :invitation_document, 
          style: "border: 1px solid #D1D5DB; border-radius: 0.375rem; padding: 0.325rem; outline: none;", 
          class: "w-full sm:w-[50%] mb-2" %>
        <!-- Invitation Status Select -->
        <div class="flex flex-row w-full sm:gap-4 item-center">
          <%= form.select :invitation_status, 
            Project.invitation_statuses.keys.map { |status| [I18n.t("activerecord.attributes.project.invitation_statuses.#{status}"), status] },
            { include_blank: t("inputfield_placeholder.choice_box_select_mandatory") },
            style: "width: 200px; min-width: 200px; border: 1px solid #{project.errors[:invitation_status].present? ? '#D40031' : '#D1D5DB'}; border-radius: 0.375rem; padding: 0.5rem; outline: none;" %>

          <button popovertarget="invitation_status-popover" class="ml-2">
            <%= image_tag("svg/circle-info.svg") %>
          </button>

          <div popover id="invitation_status-popover" popoverpositioning="auto" hidden class="p-6 max-w-xs bg-white rounded-lg border border-red-600 shadow-lg">
            <button popovertarget="invitation_status-popover" popovertargetaction="hide" class="absolute top-4 right-4">
              <%= image_tag("svg/x-mark-red.svg") %>
            </button>
            <p class="font-bold text-neutral-700"><%= t("activerecord.attributes.project.invitation_status") %></p>
            <p class="p-2 max-w-xs text-gray-600 rounded-md">
              <%= t("activerecord.attributes.info_project.invitation_status") %>
            </p>
          </div>
        </div>
        <div style="color: #D40031; font-size: 0.875rem; margin-top: 0.25rem;">
          <% if project.errors[:invitation_status].any? %>
            <%= project.errors[:invitation_status].first %>
          <% end %>
        </div>
        <div style="color: #D40031; font-size: 0.875rem; margin-top: 0.25rem;">
          <% if project.errors[:invitation_document].any? %>
            <%= project.errors[:invitation_document].first %>
          <% end %>
        </div>
      </div>
    </div>
    <!-- Certificate Document Upload -->
    <div class="flex-1 gap-2 m-5">
      <div class="flex items-center">
        <strong>
          <%= form.label :certificate_document, "#{t("activerecord.attributes.project.documents.certificate_document")}:", 
              style: "color: #{project.errors[:certificate_document].any? ? '#D40031' : "#{project.errors[:certificate_status].present? ? '#D40031': 'inherit'};"};" %>
        </strong>
        <button popovertarget="certificate_document-popover" class="ml-2">
          <%= image_tag("svg/circle-info.svg") %>
        </button>

        <div popover id="certificate_document-popover" popoverpositioning="auto" hidden class="p-6 max-w-xs bg-white rounded-lg border border-red-600 shadow-lg">
          <button popovertarget="certificate_document-popover" popovertargetaction="hide" class="absolute top-4 right-4">
            <%= image_tag("svg/x-mark-red.svg") %>
          </button>
          <p class="font-bold text-neutral-700"><%= t("activerecord.attributes.project.documents.certificate_document") %></p>
          <p class="p-2 max-w-xs text-gray-600 rounded-md">
            <%= t("activerecord.attributes.info_project.documents") %>
          </p>
        </div>
      </div>
      <div class="flex gap-5 items-center">
        <% if project.certificate_document.attached? %>
          <strong>
            <%= link_to truncate(File.basename(project.certificate_document.filename.to_s, File.extname(project.certificate_document.filename.to_s)), length: 13, omission: '...') + File.extname(project.certificate_document.filename.to_s), 
                        rails_blob_path(project.certificate_document, disposition: "attachment", cache_buster: Time.now.to_i),
                        title: project.certificate_document.filename.to_s,
                        id: 'certificate_document_link' %>
          </strong>
          <!-- View document button -->
          <%= link_to rails_blob_path(project.certificate_document, disposition: "inline"), 
                      target: "_blank", rel: "noopener noreferrer", class: "btn flex items-center justify-between w-auto", 
                      data: { cache_buster: Time.now.to_i }, title: t("actions.view") do %>
            <%= image_tag("svg/open-eye.svg") %>
            <span class="hidden ml-2 sm:inline"><%= t("actions.view") %></span>
          <% end %>
          <!-- Download document button -->
          <%= link_to rails_blob_path(project.certificate_document, disposition: "attachment"), 
                      class: "btn flex items-center justify-between w-auto", 
                      data: { cache_buster: Time.now.to_i }, title: t("actions.download") do %>
            <%= image_tag("svg/doc-download.svg") %>
            <span class="hidden ml-2 sm:inline"><%= t("actions.download") %></span>
          <% end %>
          <!-- Delete document button -->
          <button class="flex justify-between items-center w-auto btn"
                  onclick="removeDocumentAndSubmit('project[remove_certificate_document]', 
                  '<%= t('actions.confirm_delete_doc', document: project.certificate_document.filename) %>');"
                  title="<%=  t("actions.delete")  %>">
            <%= image_tag("svg/delete.svg") %>
            <span class="hidden ml-2 sm:inline"><%= t("actions.delete") %></span>
          </button>
        <% else %>
          <%= t("inputfield_placeholder.document_no_upload") %>
        <% end %>
      </div>  
      <!-- Certificate Upload & Status -->
      <div class="flex-1 my-5">
        <!-- File Input Field -->
        <%= form.file_field :certificate_document, style: "border: 1px solid #D1D5DB; border-radius: 0.375rem; padding: 0.325rem; outline: none;", 
          class: "w-full sm:w-[50%] mb-4" %>
        <!-- Certificate Status Select -->
        <div class="flex flex-row w-full sm:gap-4 item-center">
          <%= form.select :certificate_status, 
            Project.certificate_statuses.keys.map { |status| [I18n.t("activerecord.attributes.project.certificate_statuses.#{status}"), status] },
            { include_blank: t("inputfield_placeholder.choice_box_select_mandatory") },
            style: "width: 200px; min-width: 200px; border: 1px solid #{project.errors[:certificate_status].present? ? '#D40031' : '#D1D5DB'}; border-radius: 0.375rem; padding: 0.5rem; outline: none;" %>

          <button popovertarget="certificate_status-popover" class="flex-1 ml-2">
            <%= image_tag("svg/circle-info.svg") %>
          </button>

          <div popover id="certificate_status-popover" popoverpositioning="auto" hidden class="p-6 max-w-xs bg-white rounded-lg border border-red-600 shadow-lg">
            <button popovertarget="certificate_status-popover" popovertargetaction="hide" class="absolute top-4 right-4">
              <%= image_tag("svg/x-mark-red.svg") %>
            </button>
            <p class="font-bold text-neutral-700"><%= t("activerecord.attributes.project.certificate_status") %></p>
            <p class="p-2 max-w-xs text-gray-600 rounded-md">
              <%= t("activerecord.attributes.info_project.certificate_status") %>
            </p>
          </div>
        </div>
        <div style="color: #D40031; font-size: 0.875rem; margin-top: 0.25rem;">
          <% if project.errors[:certificate_status].any? %>
            <%= project.errors[:certificate_status].first %>
          <% end %>
        </div>
        <div style="color: #D40031; font-size: 0.875rem; margin-top: 0.25rem;">
          <% if project.errors[:certificate_document].any? %>
            <%= project.errors[:certificate_document].first %>
          <% end %>
        </div>
      </div>
    </div>
  </div>
<% end %>
<script>
  let projectTypeTextField;
  let addProjectTypeButton;
  let keyTopicTextField;
  let addKeyTopicButton;

  window.addEventListener('resize', adjustFilenames);

  document.addEventListener('DOMContentLoaded', () => {
    togglePopover();
    projectTypeTextField = document.getElementById('project_type_text_field');
    addProjectTypeButton = document.getElementById('add_project_type_button');
    resetProjectTypeCheckboxes();    
    initializeCheckboxesProjectType();
    keyTopicTextField = document.getElementById('key_topic_text_field');
    addKeyTopicButton = document.getElementById('add_key_topic_button');
    resetKeyTopicCheckboxes();
    initializeCheckboxesKeyTopic();
    adjustFilenames();
    parseProjectTypes();
    handleNewProjectType();
    parseKeyTopics();
    handleNewKeyTopic();
  });

  function removeDocumentAndSubmit(paramName, confirmText) {
    if (confirm(confirmText)) {
      const form = document.getElementById('create_project_form');
      if (form) {
        let hiddenField = document.querySelector(`input[name="${paramName}"]`);
        if (!hiddenField) {
          hiddenField = document.createElement('input');
          hiddenField.type = 'hidden';
          hiddenField.name = paramName;
          hiddenField.value = 'true';
          form.appendChild(hiddenField);
        }
        form.submit();
      }
    }
  }

  function togglePopover() {
    const popoverButtons = document.querySelectorAll('[popovertarget]');
    let currentlyOpenPopover = null; // Variable to track the currently open popover

    popoverButtons.forEach(button => {
      button.addEventListener('click', (event) => {
        // Prevent form submission when button is clicked
        event.preventDefault();

        const targetPopoverId = button.getAttribute('popovertarget');
        const popover = document.getElementById(targetPopoverId);

        // If there's a currently open popover and it's not the one being clicked
        if (currentlyOpenPopover && currentlyOpenPopover !== popover) {
          currentlyOpenPopover.style.display = 'none';
        }

        // Toggle visibility of the clicked popover
        if (popover.style.display === 'none' || popover.style.display === '') {
          popover.style.display = 'block';
          currentlyOpenPopover = popover;
        } else {
          popover.style.display = 'none';
          currentlyOpenPopover = null;
        }
      });
    });
    
    // Close popover when clicking outside
    document.addEventListener('click', (event) => {
        if (currentlyOpenPopover && !currentlyOpenPopover.contains(event.target) && !Array.from(popoverButtons).some(button => button.contains(event.target))) {
            currentlyOpenPopover.style.display = 'none';
            currentlyOpenPopover = null;
        }
    });
  }

  function parseProjectTypes() {
    const checkboxes = document.querySelectorAll('.project_type_checkboxes');

    checkboxes.forEach(checkbox => {
      checkbox.addEventListener('change', function() {
        let currentTypes = projectTypeTextField.value.split(', ').filter(Boolean);
        const typeName = checkbox.dataset.typeName;

        if (checkbox.checked) {
          if (!currentTypes.includes(typeName)) {
            currentTypes.push(typeName);
          }
        } else {
          currentTypes = currentTypes.filter(type => type !== typeName);
        }

        projectTypeTextField.value = currentTypes.join(', ');
      });
    });
  }
  
  function handleNewProjectType() {
    const newProjectTypeField = document.getElementById('new_project_type_field');
    const projectTypeCheckboxContainer = document.getElementById('project_type_checkboxes');

    if (!newProjectTypeField || !projectTypeCheckboxContainer || !addProjectTypeButton) return;

    addProjectTypeButton.addEventListener('click', function(event) {
        event.preventDefault();
        const newTypeName = newProjectTypeField.value.trim();
        if (newTypeName) {
            // Send the new project type to the server
            fetch('/project_types', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
                },
                body: JSON.stringify({ project_type: { type_name: newTypeName } })
            })
            .then(response => response.json()) // Parse JSON response
            .then(data => {
                if (data && data.id && data.type_name) {
                    console.log('Project type added successfully:', data);

                    // Create the checkbox and label using the server-generated ID
                    const checkboxId = `project_type_${data.id}`;

                    // Create the label wrapper
                    const newLabel = document.createElement('label');
                    newLabel.className = 'flex items-center py-1 px-3 m-1 bg-gray-200 rounded-full cursor-pointer';
                    newLabel.setAttribute('for', checkboxId);

                    // Create the checkbox
                    const newCheckbox = document.createElement('input');
                    newCheckbox.type = 'checkbox';
                    newCheckbox.className = 'w-5 h-5 project_type_checkbox';
                    newCheckbox.id = checkboxId;
                    newCheckbox.dataset.typeName = data.type_name.trim();

                    // Create the text span
                    const newTextSpan = document.createElement('span');
                    newTextSpan.className = 'ml-2';
                    newTextSpan.textContent = data.type_name;

                    // Append the checkbox and text span to the label
                    newLabel.appendChild(newCheckbox);
                    newLabel.appendChild(newTextSpan); // Corrected: Append the text span to the label

                    // Append the label to the container
                    projectTypeCheckboxContainer.appendChild(newLabel);

                    // Clear the input field
                    newProjectTypeField.value = '';

                    // Add event listener for the new checkbox
                    newCheckbox.addEventListener('change', function() {
                        let currentTypes = projectTypeTextField.value.split(', ').filter(Boolean);
                        if (newCheckbox.checked) {
                            if (!currentTypes.includes(data.type_name)) {
                                currentTypes.push(data.type_name);
                            }
                        } else {
                            currentTypes = currentTypes.filter(type => type !== data.type_name);
                        }
                        projectTypeTextField.value = currentTypes.join(', ');
                    });
                } else {
                    console.error('Error adding project type: Invalid response from server');
                }
            })
            .catch(error => {
                console.error('Error:', error);
            });
        }
    });
  }

  // Function to initialize project type checkboxes
  function initializeCheckboxesProjectType() {
    let currentTypes = projectTypeTextField.value.split(', ').map(type => type.trim());
    const checkboxes = document.querySelectorAll('.project_type_checkboxes');

    checkboxes.forEach(checkbox => {
        const typeName = checkbox.dataset.typeName.trim();
        checkbox.checked = currentTypes.includes(typeName);
    });
  }

  // Function to update the project type text field
  function updateProjectTypeTextField() {
    const projectTypeCheckboxes = document.querySelectorAll('.project_type_checkboxes');
    let currentProjectTypes = [];

    projectTypeCheckboxes.forEach(checkbox => {
        if (checkbox.checked) {
            currentProjectTypes.push(checkbox.dataset.typeName.trim());
        }
    });

    projectTypeTextField.value = currentProjectTypes.join(', ');
  }

  // Function to reset checkboxes when switching projects
  function resetProjectTypeCheckboxes() {
    const checkboxes = document.querySelectorAll('.project_type_checkboxes');
    checkboxes.forEach(checkbox => {
        checkbox.checked = false;
    });
  }

  // Add event listeners to project type checkboxes
  document.querySelectorAll('.project_type_checkboxes').forEach(checkbox => {
      checkbox.addEventListener('change', updateProjectTypeTextField);
  });

  function parseKeyTopics() {
    const checkboxes = document.querySelectorAll('.key_topic_checkboxes');

    checkboxes.forEach(checkbox => {
      checkbox.addEventListener('change', function() {
        let currentTopics = keyTopicTextField.value.split(', ').filter(Boolean);
        const topicName = checkbox.dataset.topicName;

        if (checkbox.checked) {
          if (!currentTopics.includes(topicName)) {
            currentTopics.push(topicName);
          }
        } else {
          currentTopics = currentTopics.filter(topic => topic !== topicName);
        }

        keyTopicTextField.value = currentTopics.join(', ');
      });
    });
  }

  function handleNewKeyTopic() {
    const newKeyTopicField = document.getElementById('new_key_topic_field');
    const keyTopicCheckboxContainer = document.getElementById('key_topic_checkboxes');

    if (!newKeyTopicField || !keyTopicCheckboxContainer || !addKeyTopicButton) return;

    addKeyTopicButton.addEventListener('click', function(event) {
        event.preventDefault();
        const newTopicName = newKeyTopicField.value.trim();
        if (newTopicName) {
            // Send the new key topic to the server
            fetch('/key_topics', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
                },
                body: JSON.stringify({ key_topic: { topic_name: newTopicName } })
            })
            .then(response => response.json()) // Parse JSON response
            .then(data => {
                if (data && data.id && data.topic_name) {
                    console.log('Key Topic added successfully:', data);

                    // Create the checkbox and label using the server-generated ID
                    const checkboxId = `key_topic_${data.id}`;

                    // Create the label wrapper
                    const newLabel = document.createElement('label');
                    newLabel.className = 'flex items-center py-1 px-3 m-1 bg-gray-200 rounded-full cursor-pointer';
                    newLabel.setAttribute('for', checkboxId);

                    // Create the checkbox
                    const newCheckbox = document.createElement('input');
                    newCheckbox.type = 'checkbox';
                    newCheckbox.className = 'w-5 h-5 key_topic_checkbox';
                    newCheckbox.id = checkboxId;
                    newCheckbox.dataset.topicName = data.topic_name.trim();

                    // Create the text span
                    const newTextSpan = document.createElement('span');
                    newTextSpan.className = 'ml-2';
                    newTextSpan.textContent = data.topic_name;

                    // Append the checkbox and text span to the label
                    newLabel.appendChild(newCheckbox);
                    newLabel.appendChild(newTextSpan);

                    // Append the label to the container
                    keyTopicCheckboxContainer.appendChild(newLabel);

                    // Clear the input field
                    newKeyTopicField.value = '';

                    // Add event listener for the new checkbox
                    newCheckbox.addEventListener('change', function() {
                        let currentTopics = keyTopicTextField.value.split(', ').filter(Boolean);
                        if (newCheckbox.checked) {
                            if (!currentTopics.includes(data.topic_name)) {
                                currentTopics.push(data.topic_name);
                            }
                        } else {
                            currentTopics = currentTopics.filter(topic => topic !== data.topic_name);
                        }
                        keyTopicTextField.value = currentTopics.join(', ');
                    });
                } else {
                    console.error('Error adding key topic: Invalid response from server');
                }
            })
            .catch(error => {
                console.error('Error:', error);
            });
        }
    });
  }

  // Function to initialize key topic checkboxes
  function initializeCheckboxesKeyTopic() {
    let currentKeyTopics = keyTopicTextField.value.split(', ').map(topic => topic.trim());
    const keyTopicCheckboxes = document.querySelectorAll('.key_topic_checkboxes');

    keyTopicCheckboxes.forEach(checkbox => {
        const topicName = checkbox.dataset.topicName.trim();
        checkbox.checked = currentKeyTopics.includes(topicName);
    });
  }

  // Function to update the text field based on checkbox states
  function updateKeyTopicTextField() {
    const keyTopicCheckboxes = document.querySelectorAll('.key_topic_checkboxes');
    let currentKeyTopics = [];

    keyTopicCheckboxes.forEach(checkbox => {
        if (checkbox.checked) {
            currentKeyTopics.push(checkbox.dataset.topicName.trim());
        }
    });

    keyTopicTextField.value = currentKeyTopics.join(', ');
  }

  // Function to reset key topic checkboxes when switching projects
  function resetKeyTopicCheckboxes() {
    const keyTopicCheckboxes = document.querySelectorAll('.key_topic_checkboxes');
    keyTopicCheckboxes.forEach(checkbox => {
        checkbox.checked = false;
    });
  }

  // Add event listeners to key topic checkboxes
  document.querySelectorAll('.key_topic_checkboxes').forEach(checkbox => {
      checkbox.addEventListener('change', updateKeyTopicTextField);
  });

  function getExtension(filename) {
    return filename.slice((filename.lastIndexOf('.') - 1 >>> 0) + 2);
  }

  function getBaseFilename(filename, extension) {
      return filename.substring(0, filename.length - extension.length);
  }

  function truncateFilename(linkId, maxLength) {
      var link = document.getElementById(linkId);
      if (link) {
          var fullFilename = link.title;
          var extension = getExtension(fullFilename);
          var baseFilename = getBaseFilename(fullFilename, extension);

          var truncatedBaseFilename = baseFilename.length > maxLength ? baseFilename.substring(0, maxLength) + '...' : baseFilename;

          link.textContent = truncatedBaseFilename + extension;
      }
  }

  function adjustFilenames() {
      var maxLength = window.innerWidth < 768 ? 10 : 30;

      ['participant_list_link', 'invitation_document_link', 'certificate_document_link'].forEach(linkId => {
          truncateFilename(linkId, maxLength);
      });
  }
</script>
